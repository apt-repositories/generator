name: Metadata

on:
  workflow_call:
    inputs:
      branch:
        description: The branch to put the changes for the PR on.
        required: true
        type: string
      repository:
        description: The name of the repository where we publish the metadata.
        required: true
        type: string
      baseIdOnly:
        description: Process only this base release ID.
        required: false
        type: string
      observeOnly:
        default: false
        description: Skip downloading metadata, and just produce observables from existing files.
        required: false
        type: boolean
    secrets:
      GH_ORG_TOKEN:
        required: true

env:
  # renovate: datasource=npm depName=@apt-repositories/generator versioning=semver
  GENERATOR_VERSION: "2.1.1"
  # renovate: datasource=node-version depName=node versioning=node
  NODE_VERSION: "22.14.0"
  NODE_OPTIONS: --enable-source-maps

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
    env:
      BASE_ID_ONLY: ${{ inputs.baseIdOnly }}
      OBSERVE_ONLY: ${{ inputs.observeOnly && '1' || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: true
          repository: ${{ inputs.repository }}
          show-progress: false
          token: ${{ secrets.GH_ORG_TOKEN }}

      - name: Select NodeJS version
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update metadata
        id: metadata
        run: |
          rm -rf apt || true

          set -o pipefail
          echo "timestamp=$(date --iso-8601=s --utc)" >> "$GITHUB_OUTPUT"
          echo "log<<EOF" >> $GITHUB_OUTPUT
          2>&1 npx @apt-repositories/generator@$GENERATOR_VERSION | tee --append $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          set +o pipefail

      - name: Create pull request
        env:
          BRANCH: ${{ inputs.branch }}
          GH_TOKEN: ${{ secrets.GH_ORG_TOKEN }}
          LOG: ${{ steps.metadata.outputs.log }}
          REPOSITORY: ${{ inputs.repository }}
          TIMESTAMP: ${{ steps.metadata.outputs.timestamp }}
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo "The last execution did not provide any new metadata. The target repository is in sync."
            exit 0
          fi

          echo "Generating commit message..."
          cat >/tmp/commit-message.txt <<EOF
          chore: Update Metadata from Snapshot $TIMESTAMP

          Generated at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF

          echo "Setting git user..."
          git config --global user.email "oliver.salzburg@gmail.com"
          git config --global user.name "Oliver Salzburg"

          echo "Removing previous '$BRANCH' branch..."
          git branch --delete --force $BRANCH || true

          echo "Creating '$BRANCH' branch..."
          git branch $BRANCH main || true

          echo "Checking out '$BRANCH'..."
          git checkout $BRANCH

          echo "Staging changes..."
          git add --all

          echo "Committing changes..."
          git commit \
            --file /tmp/commit-message.txt

          echo "Pushing '$BRANCH' to origin..."
          git push --force origin $BRANCH

          echo "Generating pull request body..."
          cat >/tmp/pr-body.txt <<EOF
          ## Metadata Log
          \`\`\`shell
          $LOG
          \`\`\`
          EOF

          echo "Trying to close existing pull request..."
          gh pr close $BRANCH || true

          echo "Creating pull request..."
          PR_URL=$(gh pr create \
            --body-file /tmp/pr-body.txt \
            --repo $REPOSITORY \
            --title "chore: Update Metadata from Snapshot $TIMESTAMP")
          echo "Created $PR_URL"

          echo "Setting pull request to auto-merge..."
          gh pr merge --auto $PR_URL

          echo "Done."
